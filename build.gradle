/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM.
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id 'com.google.protobuf' version '0.8.8'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
}

apply plugin: 'maven'
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

mainClassName = "injector.App"

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven { url "https://dl.bintray.com/arrow-kt/arrow-kt/" }
    maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}
def grpcVersion = '1.20.0' // CURRENT_GRPC_VERSION
def arrow_version = "0.9.0"
def protobufVersion = '3.7.1'
def protocVersion = protobufVersion
dependencies {
    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    
    compile 'no.tornado:tornadofx:1.7.17'

    implementation 'io.nats:jnats:2.4.1'

    implementation 'io.github.microutils:kotlin-logging:1.6.24'

    compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name:'slf4j-simple', version: '1.7.25'

    compile "io.arrow-kt:arrow-core-data:$arrow_version"
    compile "io.arrow-kt:arrow-core-extensions:$arrow_version"

    compile 'com.github.cretz.pbandk:pbandk-runtime-jvm:0.3.0'

    compile 'org.jfxtras:jmetro:5.3'
    compile 'no.tornado:tornadofx-controlsfx:0.1'
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

// Define the main class for the application.
mainClassName = 'injector.AppKt'


